"use strict";(self.webpackChunkhasura_extra_github_io=self.webpackChunkhasura_extra_github_io||[]).push([[635],{962:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return o},default:function(){return m}});var s=a(7462),n=a(3366),r=(a(7294),a(3905)),i=["components"],u={id:"graphqlite-custom-scalar-types",title:"Custom scalar types",sidebar_label:"Custom scalar types"},l=void 0,p={unversionedId:"handle-business-logic/graphql-server/graphqlite-custom-scalar-types",id:"handle-business-logic/graphql-server/graphqlite-custom-scalar-types",isDocsHomePage:!1,title:"Custom scalar types",description:"Hasura Extra cung c\u1ea5p custom scalar types compatible v\u1edbi Hasura gi\xfap cho vi\u1ec7c t\u1ea1o",source:"@site/i18n/vi/docusaurus-plugin-content-docs/current/03-handle-business-logic/02-graphql-server/03-scalar-types.md",sourceDirName:"03-handle-business-logic/02-graphql-server",slug:"/handle-business-logic/graphql-server/graphqlite-custom-scalar-types",permalink:"/vi/handle-business-logic/graphql-server/graphqlite-custom-scalar-types",editUrl:"https://github.com/hasura-extra/hasura-extra/edit/main/docusaurus/i18n/vi/docusaurus-plugin-content-docs/current/03-handle-business-logic/02-graphql-server/03-scalar-types.md",tags:[],version:"current",lastUpdatedBy:"Minh Vuong",lastUpdatedAt:1638641209,formattedLastUpdatedAt:"4/12/2021",sidebarPosition:3,frontMatter:{id:"graphqlite-custom-scalar-types",title:"Custom scalar types",sidebar_label:"Custom scalar types"},sidebar:"main",previous:{title:"Attributes",permalink:"/vi/handle-business-logic/graphql-server/graphqlite-attributes"},next:{title:"Persist state",permalink:"/vi/handle-business-logic/graphql-server/graphqlite-persist-state"}},o=[],c={toc:o};function m(t){var e=t.components,a=(0,n.Z)(t,i);return(0,r.kt)("wrapper",(0,s.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Hasura Extra cung c\u1ea5p ",(0,r.kt)("a",{parentName:"p",href:"https://graphqlite.thecodingmachine.io/docs/custom-types#registering-a-custom-scalar-type-advanced"},"custom scalar types")," compatible v\u1edbi Hasura gi\xfap cho vi\u1ec7c t\u1ea1o\n",(0,r.kt)("a",{parentName:"p",href:"https://hasura.io/docs/latest/graphql/core/databases/postgres/schema/remote-relationships/remote-schema-relationships.html"},"data federation"),"\nthu\u1eadn ti\u1ec7n h\u01a1n:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"json"),(0,r.kt)("li",{parentName:"ul"},"jsonb"),(0,r.kt)("li",{parentName:"ul"},"timestamptz"),(0,r.kt)("li",{parentName:"ul"},"timetz"),(0,r.kt)("li",{parentName:"ul"},"date"),(0,r.kt)("li",{parentName:"ul"},"uuid")),(0,r.kt)("p",null,"Ngo\xe0i ra b\u1ea1n c\xf2n c\xf3 th\u1ec3 \u1ee9ng d\u1ee5ng c\xe1c type tr\xean \u0111\u1ec3 validate user input format."),(0,r.kt)("p",null,"C\xe1ch s\u1eed d\u1ee5ng:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"#[Query(name: 'test_scalar', outputType: 'json')]\npublic function __invoke(\n    #[UseInputType(inputType: 'date')] ?\\DateTimeInterface $date = null,\n    #[UseInputType(inputType: 'json')] ?array $json = null,\n    #[UseInputType(inputType: 'jsonb')] ?array $jsonb = null,\n    #[UseInputType(inputType: 'timestamptz')] ?\\DateTimeInterface $timestamptz = null,\n    #[UseInputType(inputType: 'timetz')] ?\\DateTimeInterface $timetz = null,\n    ?Uuid $uuid = null,\n): array {\n    return compact(\n        'date', \n        'json', \n        'jsonb', \n        'timestamptz',\n        'timetz',\n        'uuid'\n    );\n}\n")))}m.isMDXComponent=!0}}]);